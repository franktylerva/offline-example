{"version":3,"sources":["Header.tsx","DessertDrawer.tsx","DessertList.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["useStyles","makeStyles","typographyStyles","flex","Header","props","classes","AppBar","position","Toolbar","Typography","className","user","name","paper","width","padding","height","top","footer","textAlign","paddingTop","fontSize","DessertDrawer","useState","currentDessert","dessert","setDessert","useEffect","handleInputChange","e","currentTarget","value","Drawer","anchor","open","onClose","Grid","container","direction","item","xs","TextField","autoFocus","margin","id","label","type","fullWidth","onChange","calories","fat","carbs","protein","Button","onClick","color","handleSave","table","minWidth","headerBar","marginTop","marginBottom","DessertList","db","usePouch","setOpen","defaultDessert","setCurrentDessert","desserts","useAllDocs","include_docs","a","_id","put","post","handleEdit","get","revs_info","doc","console","log","handleDelete","rev","Fab","size","aria-label","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","rows","map","scope","IconButton","_rev","App","sm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","PouchDB","remoteDatabase","sync","live","heartbeat","timeout","retry","ReactDOM","render","StrictMode","pouchdb","document","getElementById"],"mappings":"sOAIMA,EAAYC,aAAW,iBAAO,CAChCC,iBAAkB,CACdC,KAAM,OAsBCC,EAVA,SAACC,GACZ,IAAMC,EAAUN,IAChB,OAAO,cAACO,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACH,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,UAAWL,EAAQJ,iBAA/B,+BACA,eAACQ,EAAA,EAAD,WAAaL,EAAMO,KAAKC,KAAxB,gB,+MCnBNb,EAAYC,YAAW,CACzBa,MAAO,CACHC,MAAO,IACPC,QAAS,GACTC,OAAQ,mBACRC,IAAK,IAETC,OAAQ,CACJC,UAAW,QACXC,WAAY,IAEhBnB,iBAAkB,CACdC,KAAM,EACNmB,SAAU,MAwGHC,EApFO,SAAClB,GAEnB,IAAMC,EAAUN,IAFoB,EAGNwB,mBAASnB,EAAMoB,gBAHT,mBAG7BC,EAH6B,KAGpBC,EAHoB,KAKpCC,qBAAU,WACHvB,EAAMoB,gBACPE,EAAWtB,EAAMoB,kBAErB,CAACpB,EAAMoB,iBAET,IAAMI,EAAgE,SAACC,GAAO,IAAD,EACjDA,EAAEC,cAAlBlB,EADiE,EACjEA,KAAMmB,EAD2D,EAC3DA,MACdL,EAAW,2BAAKD,GAAN,kBAAgBb,EAAOmB,MAGrC,OACI,cAACC,EAAA,EAAD,CAAQ3B,QAAS,CAAEQ,MAAOR,EAAQQ,OAASoB,OAAO,QAAQC,KAAM9B,EAAM8B,KAAMC,QAAS/B,EAAM+B,QAA3F,SACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAA1B,SACI,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACI,cAACC,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPC,GAAG,OACHhC,KAAK,OACLiC,MAAM,eACNC,KAAK,OACLf,MAAON,EAAQb,KACfmC,WAAS,EACTC,SAAUpB,IAEd,cAACa,EAAA,EAAD,CACIE,OAAO,QACPC,GAAG,WACHhC,KAAK,WACLiC,MAAM,WACNC,KAAK,OACLf,MAAON,EAAQwB,SACfF,WAAS,EACTC,SAAUpB,IAEd,cAACa,EAAA,EAAD,CACIE,OAAO,QACPC,GAAG,MACHhC,KAAK,MACLiC,MAAM,MACNC,KAAK,OACLf,MAAON,EAAQyB,IACfH,WAAS,EACTC,SAAUpB,IAEd,cAACa,EAAA,EAAD,CACIE,OAAO,QACPC,GAAG,QACHhC,KAAK,QACLiC,MAAM,QACNC,KAAK,OACLf,MAAON,EAAQ0B,MACfJ,WAAS,EACTC,SAAUpB,IAEd,cAACa,EAAA,EAAD,CACIE,OAAO,QACPC,GAAG,UACHhC,KAAK,UACLiC,MAAM,UACNC,KAAK,OACLf,MAAON,EAAQ2B,QACfL,WAAS,EACTC,SAAUpB,IAEd,cAACyB,EAAA,EAAD,CAAQC,QAASlD,EAAM+B,QAASoB,MAAM,UAAtC,oBAGA,cAACF,EAAA,EAAD,CAAQC,QAAS,kBAAMlD,EAAMoD,WAAW/B,IAAU8B,MAAM,UAAxD,0B,QCpGdxD,EAAYC,YAAW,CACzByD,MAAO,CACLC,SAAU,KAEZC,UAAW,CACPxC,UAAW,QACXyC,UAAW,GACXC,aAAc,MASP,SAASC,EAAY1D,GAEhC,IAAM2D,EAAKC,cACL3D,EAAUN,IAH8B,EAItBwB,oBAAS,GAJa,mBAIvCW,EAJuC,KAIjC+B,EAJiC,KAMxCC,EAA0B,CAAEtD,KAAM,GAAIqC,SAAU,EAAGC,IAAK,EAAGC,MAAO,EAAGC,QAAS,GANtC,EAOH7B,mBAAS2C,GAPN,mBAOvC1C,EAPuC,KAOxB2C,EAPwB,KAaxCC,EAA8DC,YAAW,CAACC,cAAc,IAWxFd,EAAU,uCAAG,WAAO/B,GAAP,SAAA8C,EAAA,0DACZ9C,EAAQ+C,IADI,gCAELT,EAAGU,IAAIhD,GAFF,6CAKLsC,EAAGW,KAAKjD,GALH,OAOfwC,GAAQ,GAPO,2CAAH,sDAUVU,EAAU,uCAAG,WAAO/B,GAAP,eAAA2B,EAAA,6DAEfJ,EAAkB,MAFH,kBAIKJ,EAAGa,IAAIhC,EAAI,CAC3BiC,WAAW,IALA,OAIPC,EAJO,OAObX,EAAkBW,GAClBb,GAAQ,GARK,gDAWbc,QAAQC,IAAR,MAXa,yDAAH,sDAeVC,EAAY,uCAAG,WAAOrC,EAAWsC,GAAlB,SAAAX,EAAA,sEACXR,EAAGU,IAAI,CAAC,UAAY,EAAM,IAAO7B,EAAI,KAAQsC,IADlC,2CAAH,wDAIlB,OACI,eAAC9C,EAAA,EAAD,WACI,cAACA,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI9B,UAAWL,EAAQsD,UAAtC,SACI,eAACwB,EAAA,EAAD,CAAKC,KAAK,QAAQ7B,MAAM,UAAU8B,aAAW,MAA7C,UACE,cAAC,IAAD,CAAS9B,MAAM,QAAQD,QA1CZ,WACvBW,GAAQ,MA0CI,cAAC,EAAD,CAAe/B,KAAMA,EAAMV,eAAgBA,EAAgBgC,WAAYA,EAAYrB,QAvCvE,WACtBgC,EAAkBD,GAClBD,GAAQ,WAwCJ,cAAC7B,EAAA,EAAD,UACI,cAACkD,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACI,eAACC,EAAA,EAAD,CAAO/E,UAAWL,EAAQoD,MAAO2B,KAAK,QAAQC,aAAW,gBAAzD,UACI,cAACK,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,qCACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,sBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,wBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BACA,cAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,4BACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,8BAGR,cAACC,EAAA,EAAD,UACK1B,EAAS2B,KAAKC,KAAI,SAAClB,GAAD,OACnB,eAACa,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWL,UAAU,KAAKU,MAAM,MAAhC,SACKnB,EAAIlE,OAET,cAACgF,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0Bf,EAAI7B,WAC9B,cAAC2C,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0Bf,EAAI5B,MAC9B,cAAC0C,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0Bf,EAAI3B,QAC9B,cAACyC,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0Bf,EAAI1B,UAC9B,eAACwC,EAAA,EAAD,CAAWC,MAAM,QAAQ/E,MAAO,GAAhC,UACI,cAACoF,EAAA,EAAD,CAAY5C,QAAS,kBAAM2B,EAAaH,EAAIN,IAAIM,EAAIqB,OAApD,SACI,cAAC,IAAD,CAAY9E,SAAS,QAAQkC,MAAM,gBAEvC,cAAC2C,EAAA,EAAD,CAAY5C,QAAS,kBAAMqB,EAAWG,EAAIN,MAA1C,SACI,cAAC,IAAD,CAAUnD,SAAS,QAAQkC,MAAM,mBAb9BuB,EAAIN,oBC9EhC4B,MApBf,WAIE,OACE,eAAChE,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAA1B,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAAV,SACE,cAAC,EAAD,CAAQ5B,KALK,CAACC,KAAM,YAOtB,eAACwB,EAAA,EAAD,CAAMG,MAAI,EAACF,WAAS,EAApB,UACE,cAACD,EAAA,EAAD,CAAMG,MAAI,EAAC8D,GAAI,IACf,cAACjE,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAI6D,GAAI,EAAvB,SACE,cAACvC,EAAD,MAEF,cAAC1B,EAAA,EAAD,CAAMG,MAAI,EAAC8D,GAAI,WCPRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCARxC,EAAK,IAAIgD,IAAQ,YAEjBC,EAAiB,IAAID,IAAQ,kCAEnCA,IAAQE,KAAKlD,EAAIiD,EAAgB,CAC/BE,MAAM,EACNC,WAAW,EACXC,SAAS,EACTC,OAAO,IAGTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,QAAS1D,EAAnB,SACE,cAAC,EAAD,QAGJ2D,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.894ada60.chunk.js","sourcesContent":["import { AppBar, Toolbar, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles(() => ({\n    typographyStyles: {\n        flex: 1\n    }\n}));\n\ninterface Props {\n    user: User\n}\n\nexport interface User {\n    name: string\n}\n\nconst Header = (props: Props) => {\n    const classes = useStyles();\n    return <AppBar position=\"static\">\n        <Toolbar>\n            <Typography className={classes.typographyStyles}>PouchDB / CouchDB</Typography>\n            <Typography>{props.user.name}&nbsp;</Typography>\n        </Toolbar>\n    </AppBar>\n}\n\nexport default Header;","import React, {useState, useEffect} from 'react';\nimport { Drawer, Grid, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles({\n    paper: { \n        width: 500,\n        padding: 20,\n        height: 'calc(50% - 64px)',\n        top: 64\n    },\n    footer: {\n        textAlign: 'right',\n        paddingTop: 10\n    },\n    typographyStyles: {\n        flex: 1,\n        fontSize: 10\n    }\n});\n\ninterface Props {\n    currentDessert: Dessert,\n    onClose: () => void,\n    handleSave: (a: Dessert) => void,\n    open: boolean\n}\n\nexport interface Dessert {\n    name: string,\n    calories: number,\n    fat: number,\n    carbs: number,\n    protein: number,\n    [key: string]: any\n}\n\nconst DessertDrawer = (props: Props) => {\n\n    const classes = useStyles();\n    const [dessert, setDessert] = useState(props.currentDessert)\n\n    useEffect(() => {\n        if(props.currentDessert) {\n          setDessert(props.currentDessert);\n        }\n    },[props.currentDessert])\n\n    const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n        const { name, value } = e.currentTarget\n        setDessert({ ...dessert, [name]: value })\n    }\n\n    return (\n        <Drawer classes={{ paper: classes.paper }} anchor=\"right\" open={props.open} onClose={props.onClose}>\n            <Grid container direction=\"column\">\n                <Grid item xs={12}>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        name=\"name\" \n                        label=\"Dessert Name\"\n                        type=\"text\"\n                        value={dessert.name}\n                        fullWidth\n                        onChange={handleInputChange}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"calories\" \n                        name=\"calories\" \n                        label=\"calories\"\n                        type=\"text\"\n                        value={dessert.calories}\n                        fullWidth \n                        onChange={handleInputChange}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"fat\" \n                        name=\"fat\" \n                        label=\"Fat\"\n                        type=\"text\"\n                        value={dessert.fat}\n                        fullWidth \n                        onChange={handleInputChange}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"carbs\" \n                        name=\"carbs\" \n                        label=\"Carbs\"\n                        type=\"text\"\n                        value={dessert.carbs}\n                        fullWidth \n                        onChange={handleInputChange}\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"protein\" \n                        name=\"protein\" \n                        label=\"Protein\"\n                        type=\"text\"\n                        value={dessert.protein}\n                        fullWidth \n                        onChange={handleInputChange}\n                    />\n                    <Button onClick={props.onClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={() => props.handleSave(dessert)} color=\"primary\">\n                        Save\n                    </Button>\n                </Grid>\n            </Grid>\n        </Drawer>\n    )\n\n}\n\nexport default DessertDrawer;","import React, {useState} from 'react';\nimport { Grid, Fab } from '@mui/material';\nimport { TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Paper } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport AddIcon from '@mui/icons-material/Add';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DessertDrawer, {Dessert} from './DessertDrawer';\nimport { useAllDocs, usePouch, ResultType } from 'use-pouchdb';\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 650,\n    },\n    headerBar: {\n        textAlign: 'right',\n        marginTop: 10,\n        marginBottom: 20\n    }\n  });\n\ninterface Props {\n\n}\n\n\nexport default function DessertList(props: Props) {\n\n    const db = usePouch()\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    \n    const defaultDessert: Dessert = { name: '', calories: 0, fat: 0, carbs: 0, protein: 0 };\n    const [currentDessert,setCurrentDessert] = useState(defaultDessert);\n\n    // const { rows: desserts } = useAllDocs({\n    //     include_docs: true, // Load all document bodies\n    // })\n\n    const desserts: ResultType<PouchDB.Core.AllDocsResponse<Dessert>> = useAllDocs({include_docs: true});\n\n    const handleDrawerOpen = () => {\n      setOpen(true)  \n    };\n\n    const handleDrawerClose = () => {\n        setCurrentDessert(defaultDessert);\n        setOpen(false)  \n    }\n\n    const handleSave = async (dessert: Dessert) => {\n        if(dessert._id) {\n            await db.put(dessert);\n        }\n        else {\n            await db.post(dessert);\n        }\n        setOpen(false)\n    };\n\n    const handleEdit = async (id: string) => {\n\n        setCurrentDessert(null)\n        try {\n          const doc = await db.get(id, {\n            revs_info: true\n          });\n          setCurrentDessert(doc);\n          setOpen(true);\n        }\n        catch(err) {\n          console.log(err);\n        }\n    };\n\n    const handleDelete = async (id: string,rev: string) => {\n        await db.put({\"_deleted\": true, \"_id\": id, \"_rev\": rev});\n    }\n\n    return (\n        <Grid>\n            <Grid item xs={12} className={classes.headerBar}>\n                <Fab size=\"small\" color=\"primary\" aria-label=\"add\">\n                  <AddIcon color=\"white\" onClick={handleDrawerOpen}/>\n                  <DessertDrawer open={open} currentDessert={currentDessert} handleSave={handleSave} onClose={handleDrawerClose}/>\n                </Fab>\n            </Grid>\n            <Grid>\n                <TableContainer component={Paper}>\n                    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Dessert (100g serving)</TableCell>\n                                <TableCell align=\"right\">Calories</TableCell>\n                                <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n                                <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n                                <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n                                <TableCell align=\"center\">Actions&nbsp;</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {desserts.rows.map((doc: any) => (\n                            <TableRow key={doc._id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {doc.name}\n                                </TableCell>\n                                <TableCell align=\"right\">{doc.calories}</TableCell>\n                                <TableCell align=\"right\">{doc.fat}</TableCell>\n                                <TableCell align=\"right\">{doc.carbs}</TableCell>\n                                <TableCell align=\"right\">{doc.protein}</TableCell>\n                                <TableCell align=\"right\" width={88}>\n                                    <IconButton onClick={() => handleDelete(doc._id,doc._rev)}>\n                                        <DeleteIcon fontSize=\"small\" color=\"secondary\"/>\n                                    </IconButton>\n                                    <IconButton onClick={() => handleEdit(doc._id)}>\n                                        <EditIcon fontSize=\"small\" color=\"primary\"/>\n                                    </IconButton>\n                                </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n        </Grid>\n    )\n}","import React from 'react';\nimport { Grid } from '@mui/material';\nimport Header, {User} from \"./Header\"\nimport DessertList from \"./DessertList\"\n\nfunction App() {\n\n  const user: User = {name: \"Test\"}\n\n  return (\n    <Grid container direction=\"column\">\n      <Grid item>\n        <Header user={user}/>\n      </Grid>\n      <Grid item container>\n        <Grid item sm={2}/>\n        <Grid item xs={12} sm={8}>\n          <DessertList/>\n        </Grid>\n        <Grid item sm={2}/>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport PouchDB from 'pouchdb-browser';\nimport { Provider } from 'use-pouchdb';\n\nconst db = new PouchDB('desserts');\n\nconst remoteDatabase = new PouchDB(\"http://localhost:5984/desserts\");\n\nPouchDB.sync(db, remoteDatabase, {\n  live: true,\n  heartbeat: false,\n  timeout: false,\n  retry: true\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider pouchdb={db}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}